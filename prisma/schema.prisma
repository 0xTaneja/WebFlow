// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  MEMBER
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  createdAt     DateTime        @default(now())
  emailVerified Boolean
  image         String?
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  memberships   UserProject[]
  subscriptions Subscription[]
  invitesSent   ProjectInvite[] @relation("InviteSender")

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String   @unique
  stripeSubId      String   @unique
  status           String
  currentPeriodEnd DateTime
  createdAt        DateTime @default(now())

  // relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProject {
  userId    String
  projectId String
  role      Role    @default(MEMBER)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([userId, projectId]) // composite PK
}

model Page {
  id         String   @id @default(cuid())
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name       String
  canvasJson Json     @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([projectId])
}

model Asset {
  id        String  @id @default(cuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  key       String
  url       String
  mimeType  String?
  width     Int?
  height    Int?

  createdAt DateTime @default(now())

  @@unique([projectId, key])
  @@index([projectId])
}

model Project {
  id        String          @id @default(cuid())
  name      String
  members   UserProject[] // owners & collaborators via join table
  invites   ProjectInvite[]
  pages     Page[]
  assets    Asset[]
  createdAt DateTime        @default(now())
  deletedAt DateTime?

  @@index([id, deletedAt])
}

// New model for collaborator invitations
model ProjectInvite {
  id          String    @id @default(cuid())
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  email       String
  invitedById String
  invitedBy   User      @relation("InviteSender", fields: [invitedById], references: [id], onDelete: Cascade)
  role        Role      @default(MEMBER)
  accepted    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  acceptedAt  DateTime?

  @@unique([projectId, email])
}
